grammar Regexper
  rule root
    regexp_literal / regexp
  end

  rule regexp_literal
    '/' regexp '/' flags:[igm]* <RegexpLiteral>
  end

  rule regexp
    match:(match) alternate:('|' regexp)? <Regexp>
  end

  rule anchor_start
    '^'
  end

  rule anchor_end
    '$'
  end

  rule match
    anchor_start:anchor_start? (!repetition_count) match:(
      repetition /
      subexp /
      charset /
      terminal
    )* anchor_end:anchor_end? <Match>
  end

  rule repetition
    match:(subexp / charset / terminal) repetition_count <Repetition>
  end

  rule repetition_count
    repeat:(repeat_any / repeat_required / repeat_optional / repeat_spec) greedy:repeat_greedy_flag? <RepetitionCount>
  end

  rule repeat_any
    '*' <RepeatAny>
  end

  rule repeat_required
    '+' <RepeatRequired>
  end

  rule repeat_optional
    '?' <RepeatOptional>
  end

  rule repeat_spec
    '{' start:([0-9]+) ',' stop:([0-9]+) '}' <RepeatSpecFull> /
    '{,' stop:([0-9]+) '}' <RepeatSpecUpTo> /
    '{' start:([0-9]+) ',}' <RepeatSpecAtLeast> /
    '{' value:([0-9]+) '}' <RepeatSpecExact>
  end

  rule repeat_greedy_flag
    '?'
  end

  rule subexp
    '(' flag:(subexp_no_capture / subexp_positive_lookahead / subexp_negative_lookahead)? regexp ')' <Subexp>
  end

  rule subexp_no_capture
    '?:' <SubexpNoCapture>
  end

  rule subexp_positive_lookahead
    '?=' <SubexpPositiveLookahead>
  end

  rule subexp_negative_lookahead
    '?!' <SubexpNegativeLookahead>
  end

  rule charset
    '[' invert:'^'? match_spec:(charset_range / charset_terminal)* ']' <Charset>
  end

  rule charset_range
    start:charset_terminal '-' stop:charset_terminal <CharsetRange>
  end

  rule charset_terminal
    charset_escaped_character / charset_literal
  end

  rule charset_literal
    [^\\\]] <Literal>
  end

  rule charset_escaped_character
    '\\' escape:(
      backspace_character /
      control_character /
      digit_character /
      non_digit_character /
      form_feed_character /
      line_feed_character /
      carriage_return_character /
      white_space_character /
      non_white_space_character /
      tab_character /
      vertical_tab_character /
      word_character /
      non_word_character /
      octal_character /
      hex_character /
      unicode_character /
      null_character /
      .
    ) <EscapedCharacter>
  end

  rule terminal
    any_character / escaped_character / literal
  end

  rule any_character
    '.' <AnyCharacter>
  end

  rule literal
    [^|\\/.\[\(\)?+*$^] <Literal>
  end

  rule escaped_character
    '\\' escape:(
      word_boundary_character /
      non_word_boundary_character /
      control_character /
      digit_character /
      non_digit_character /
      form_feed_character /
      line_feed_character /
      carriage_return_character /
      white_space_character /
      non_white_space_character /
      tab_character /
      vertical_tab_character /
      word_character /
      non_word_character /
      back_reference /
      octal_character /
      hex_character /
      unicode_character /
      null_character /
      .
    ) <EscapedCharacter>
  end

  rule backspace_character
    'b' <BackspaceCharacter>
  end

  rule word_boundary_character
    'b' <WordBoundaryCharacter>
  end

  rule non_word_boundary_character
    'B' <NonWordBoundaryCharacter>
  end

  rule digit_character
    'd' <DigitCharacter>
  end

  rule non_digit_character
    'D' <NonDigitCharacter>
  end

  rule form_feed_character
    'f' <FormFeedCharacter>
  end

  rule line_feed_character
    'n' <LineFeedCharacter>
  end

  rule carriage_return_character
    'r' <CarriageReturnCharacter>
  end

  rule white_space_character
    's' <WhiteSpaceCharacter>
  end

  rule non_white_space_character
    'S' <NonWhiteSpaceCharacter>
  end

  rule tab_character
    't' <TabCharacter>
  end

  rule vertical_tab_character
    'v' <VerticalTabCharacter>
  end

  rule word_character
    'w' <WordCharacter>
  end

  rule non_word_character
    'W' <NonWordCharacter>
  end

  rule control_character
    'c' code:(.) <ControlCharacter>
  end

  rule back_reference
    [1-9] <BackReference>
  end

  rule octal_character
    '0' code:([0-7]+) <OctalCharacter>
  end

  rule hex_character
    'x' code:([0-9a-fA-F] 2..2) <HexCharacter>
  end

  rule unicode_character
    'u' code:([0-9a-fA-F] 4..4) <UnicodeCharacter>
  end

  rule null_character
    '0' <NullCharacter>
  end
end
